Anggota :
1. Muhammad Dzaki Arrahman - 2017051073
2. Edo Laksana Widodo - 2017051028
3. Deny Aldy Apriza - 2017051039

#include <iostream>
#include <cstring>

using namespace std;
const int cols = 16, rows = 15;

 char words[rows][cols] = {"tgbwwinterwsesn",
                                "aaunttmmhfoodnb",
                                "jlwcqldzmpmvdmr",
                                "asagmquwvvbsohi",
                                "bwplotanadtpgnc",
                                "rewngodjcpnatnk",
                                "eeotwosbqharrsa",
                                "azcgeswewnaknpb",
                                "dinnerqodlwdcar",
                                "onopkwmparktzcc",
                                "qbfrogmamwpweey",
                                "lqzqnnmrzjjsclg",
                                "mosgzczetdbooto",
                                "pdcrzmsngrdnrpz",
                                "ohnkzwaterjgtra"};

//char *getWordVertical(int a)
char *reverse(char *);
bool searchVertical(char *);
bool searchHorizontal(char *);
bool searchDiagonal(char *);
bool searchDiagonalR(char *);

bool searchVertical(char* kata){
for(int i=0;i < rows; i++){
	char vertword[cols];
	for (int j=0;j < cols; j++){
		vertword[j]=words[j][i];
		}

int main() {
  char n_input[10];
  int n;
  cin.getline(n_input, 10, '\n');
  n = atoi(n_input);              // cin.getline, clean, bufferoverflow'nt
  char getword[n][16];


  // input
  for (int i = 0; i < n; i++) {
    char word[16];
    fflush(stdin);
    cin.getline(word, 16, '\n');
    strcpy(getword[i], word);
  }

  // search
  cout << endl; // separator
  for (int i = 0; i < n; i++) {
    if (searchVertical(getword[i]) || searchVertical(reverse(getword[i])) ||
        searchHorizontal(getword[i]) || searchHorizontal(reverse(getword[i])) ||
        searchDiagonal(getword[i]) || searchDiagonal(reverse(getword[i])) ||
        searchDiagonalR(getword[i]) || searchDiagonalR(reverse(getword[i])))
      cout << "Ada\n";
    else
      cout << "Tidak Ada\n";
  }
  return 0;
}

bool searchHorizontal(char* kata) {
    for (int i = 0; i < rows; i++) {
      char *ketemu = strstr(words[i], kata);
      if (ketemu)
        return 1;
    }
    return 0;
}
	char *ketemu = strstr(vertword, kata);
	if (ketemu)
	return 1;
}
return 0;
}

char *reverse(char* kata){
for(int i=0; i < strlen(kata)/2;i++){
	char temp = kata[i];
	kata[i] = kata[strlen(kata) - i - 1];
	kata[strlen(kata) - i - 1] = temp;
	}
return kata;
}


bool searchDiagonal(char* kata) {
    for (int i = 0; i < rows; i++) {
      for (int j = 0; j < cols; j++) {
        char tempkata[strlen(kata)];
        for (int k = 0; k < strlen(kata); k++) {
            int xx = i + k;
            int yy = j + k;
            if (xx > rows - 1)
              xx %= rows - 1;
            if (yy > cols - 2)
              yy %= cols - 1;
            tempkata[k] = words[xx][yy];
        }
        char *ketemu = strstr(tempkata, kata);
        if (ketemu)
          return 1;
      } // j
    } // i
    return 0;
}

bool searchDiagonalR(char* kata) {
    for (int i = 0; i < rows; i++) {
      for (int j = 0; j < cols; j++) {
        char tempkata[strlen(kata)];
        for (int k = 0; k < strlen(kata); k++) {
            int xx = i + k;
            unsigned int yy = j - k;  // always positive
            if (xx > rows - 1)
              xx %= rows - 1;
            if (yy > cols - 2)
              yy %= cols - 1 - k;
            tempkata[k] = words[xx][yy];
        }
        char *ketemu = strstr(tempkata, kata);
        if (ketemu)
          return 1;
      } // j
    } // i
    return 0;
}
